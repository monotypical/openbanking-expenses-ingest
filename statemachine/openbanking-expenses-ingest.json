{
    "Comment": "Gets bank transactions from OpenBanking via GoCardless and exports them to a google sheet",
    "StartAt": "Get API Credential SSM Parameters",
    "States": {
      "Get API Credential SSM Parameters": {
        "Type": "Task",
        "Next": "Update API Credentials",
        "Parameters": {
          "Names": [
            "${AccessTokenParamName}",
            "${AccessTokenExpiresParamName}",
            "${RefreshTokenParamName}",
            "${RefreshTokenExpiresParamName}"
          ],
          "WithDecryption": true
        },
        "Resource": "arn:aws:states:::aws-sdk:ssm:getParameters",
        "ResultSelector": {
          "AccessToken": {
            "Value.$": "$.Parameters[0].Value",
            "Expires.$": "$.Parameters[1].Value"
          },
          "RefreshToken": {
            "Value.$": "$.Parameters[2].Value",
            "Expires.$": "$.Parameters[3].Value"
          }
        }
      },
      "Update API Credentials": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "OutputPath": "$.Payload",
        "Parameters": {
          "FunctionName": "${UpdateApiCredentialsFunctionARN}:$LATEST",
          "Payload": {
            "AccessToken": {
              "Value.$": "$.AccessToken.Value",
              "Expires.$": "$.AccessToken.Expires"
            },
            "RefreshToken": {
                "Value.$": "$.RefreshToken.Value",
                "Expires.$": "$.RefreshToken.Expires"
            },
            "SecretIdParam": "${SecretIdParamName}",
            "SecretKeyParam": "${SecretKeyParamName}"
          }
        },
        "Retry": [
          {
            "ErrorEquals": [
              "Lambda.ServiceException",
              "Lambda.AWSLambdaException",
              "Lambda.SdkClientException",
              "Lambda.TooManyRequestsException"
            ],
            "IntervalSeconds": 1,
            "MaxAttempts": 3,
            "BackoffRate": 2
          }
        ],
        "Next": "Update API Credentials SSM Params"
      },
      "Update API Credentials SSM Params": {
        "Type": "Parallel",
        "Branches": [
          {
            "StartAt": "Update Access Token",
            "States": {
              "Update Access Token": {
                "Type": "Task",
                "End": true,
                "Parameters": {
                  "Name": "${AccessTokenParamName}",
                  "Value.$": "$.AccessToken.Value",
                  "Type": "SecureString",
                  "KeyId": "${SsmKeyId}",
                  "Overwrite": true
                },
                "Resource": "arn:aws:states:::aws-sdk:ssm:putParameter"
              }
            }
          },
          {
            "StartAt": "Update Access Token Expiration",
            "States": {
              "Update Access Token Expiration": {
                "Type": "Task",
                "End": true,
                "Parameters": {
                  "Name": "${AccessTokenExpiresParamName}",
                  "Value.$": "States.Format('\"{}\"', $.AccessToken.Expires)",
                  "Type": "String",
                  "Overwrite": true
                },
                "Resource": "arn:aws:states:::aws-sdk:ssm:putParameter"
              }
            }
          },
          {
            "StartAt": "Update Refresh Token",
            "States": {
              "Update Refresh Token": {
                "Type": "Task",
                "End": true,
                "Parameters": {
                  "Name": "${RefreshTokenParamName}",
                  "Value.$": "$.RefreshToken.Value",
                  "Type": "SecureString",
                  "KeyId": "${SsmKeyId}",
                  "Overwrite": true
                },
                "Resource": "arn:aws:states:::aws-sdk:ssm:putParameter"
              }
            }
          },
          {
            "StartAt": "Update Refresh Token Expiration",
            "States": {
              "Update Refresh Token Expiration": {
                "Type": "Task",
                "End": true,
                "Parameters": {
                  "Name": "${RefreshTokenExpiresParamName}",
                  "Value.$": "States.Format('\"{}\"', $.RefreshToken.Expires)",
                  "Type": "String",
                  "Overwrite": true
                },
                "Resource": "arn:aws:states:::aws-sdk:ssm:putParameter"
              }
            }
          }
        ],
        "ResultPath": null,
        "Next": "Get Requisition Reference"
      },
      "Get Requisition Reference": {
        "Type": "Task",
        "Parameters": {
          "Name": "/GoCardless/Requisition-Reference",
          "WithDecryption": true
        },
        "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
        "ResultPath": "$.Requisition",
        "ResultSelector": {
          "Reference.$": "$.Parameter.Value"
        },
        "Next": "Update Requisition"
      },
      "Update Requisition": {
        "Type": "Task",
        "Resource": "arn:aws:states:::lambda:invoke",
        "Parameters": {
          "FunctionName": "${UpdateRequisitionFunctionARN}:$LATEST",
          "Payload": {
            "AccessToken.$": "$.AccessToken",
            "Requisition": {
              "Reference.$": "$.Requisition.Reference",
              "TableName": "${RequisitionTableName}"
            },
            "Bank": {
              "Name": "${BankName}",
              "Country": "${BankCountry}"
            }
          }
        },
        "OutputPath": "$.Payload",
        "Next": "Update Requisition Reference and Notify"
      },
      "Update Requisition Reference and Notify": {
        "Type": "Parallel",
        "Branches": [
          {
            "StartAt": "Update Requisition Reference",
            "States": {
              "Update Requisition Reference": {
                "Type": "Task",
                "End": true,
                "Parameters": {
                  "Name": "${RequisitionReferenceParamName}",
                  "Value.$": "$.Requisition.Reference",
                  "Type": "SecureString",
                  "KeyId": "${SsmKeyId}",
                  "Overwrite": true
                },
                "Resource": "arn:aws:states:::aws-sdk:ssm:putParameter"
              }
            }
          },
          {
            "StartAt": "Notify user if confirmation needed",
            "States": {
              "Notify user if confirmation needed": {
                "Type": "Choice",
                "Choices": [
                  {
                    "Variable": "$.Requisition.ConfirmLink",
                    "IsPresent": true,
                    "Next": "Notify user"
                  },
                  {
                    "Not": {
                      "Variable": "$.Requisition.ConfirmLink",
                      "IsPresent": true
                    },
                    "Next": "Pass"
                  }
                ],
                "Default": "Pass"
              },
              "Notify user": {
                "Type": "Task",
                "Resource": "arn:aws:states:::aws-sdk:sns:publish",
                "Parameters": {
                  "TopicArn": "${RequisitionNotificationTopic}",
                  "Message.$": "States.Format('Please click the following link to authorize ingest-shared-expenses on AWS to read your bank account transactions, in order to export these to google sheets\n\n{}', $.Requisition.ConfirmLink)",
                  "Subject": "A GoCardless Bank Account Data requisition requests requires your approval"
                },
                "End": true
              },
              "Pass": {
                "Type": "Pass",
                "End": true
              }
            }
          }
        ],
        "ResultPath": null,
        "End": true
      }
    }
  }